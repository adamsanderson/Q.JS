Q(estion/ueue)

A set of functions for making assertions and queue/list/array processing more straight forward.

It has very high unit test coverage so can confidently be used to reduce the number assertion based tests in other areas.

Methods starting is* return boolean for first argument.

The rest allow creation of functions that iterate over lists (fold and map are probably most usefull).

Q is heavil inspired by Scheme and the exercise in the Little Schemer by Daniel P Freidman and Matthhias Felleisen.

isFun(tion)
isObj(ect)
isArr(ay)
isStr(ing)
isNum(ber)
isEmptyArr
isEmptyStr
isEq(al)
isUndef(ined)

List processing, uses iterative or recursive technique (set to iterative by default - although some JS engines are tail recursion optimised and run faster than iteration)

h(head) - returns the head of a list h([1,2,3]);//1
t(ail) - returns the tail of a list Q.t([1,2,3]);//[2,3]
con(s/cat)
same - use: Q.same(1, 1, 1)//true Q.same(2, 22, 2);//false
objHas - obj = {a: {b: {c: 1}}} -> objHas(obj, "a.b.c") // true Q.objHas(obj, "a.x.y.z") // false
fold - use: Q.fold(fun, start, arr) use to build recursive functions like:
map - use:
Q.map(function (n) {
	return n*2;
}, [1,2,3]);//[2,4,6]
